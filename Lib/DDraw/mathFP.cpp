#include "mathFP.h"
/*==============================================================================================================*/
/*==============================================================================================================*/
LIB_API int Sin[256]={
0			,25		,50		,75		,100	,125	,150	,175	,
200		,224	,249	,273	,297	,321	,345	,369	,
392		,415	,438	,460	,483	,505	,526	,548	,
569		,590	,610	,630	,650	,669	,688	,706	,
724		,742	,759	,775	,792	,807	,822	,837	,
851		,865	,878	,891	,903	,915	,926	,936	,
946		,955	,964	,972	,980	,987	,993	,999	,
1004	,1009	,1013	,1016	,1019	,1021	,1023	,1024	,
1024	,1024	,1023	,1021	,1019	,1016	,1013	,1009	,
1004	,999	,993	,987	,980	,972	,964	,955	,
946		,936	,926	,915	,903	,891	,878	,865	,
851		,837	,822	,807	,792	,775	,759	,742	,
724		,706	,688	,669	,650	,630	,610	,590	,
569		,548	,526	,505	,483	,460	,438	,415	,
392		,369	,345	,321	,297	,273	,249	,224	,
200		,175	,150	,125	,100	,75		,50		,25		,
0			,-24	,-49	,-74	,-99	,-124	,-149	,-174	,
-199	,-223	,-248	,-272	,-296	,-320	,-344	,-368	,
-391	,-414	,-437	,-459	,-482	,-504	,-525	,-547	,
-568	,-589	,-609	,-629	,-649	,-668	,-687	,-705	,
-723	,-741	,-758	,-774	,-791	,-806	,-821	,-836	,
-850	,-864	,-877	,-890	,-902	,-914	,-925	,-935	,
-945	,-954	,-963	,-971	,-979	,-986	,-992	,-998	,
-1003	,-1008,-1012,-1015,-1018,-1020,-1022,-1023,
-1023	,-1023,-1022,-1020,-1018,-1015,-1012,-1008,
-1003	,-998	,-992	,-986	,-979	,-971	,-963	,-954	,
-945	,-935	,-925	,-914	,-902	,-890	,-877	,-864	,
-850	,-836	,-821	,-806	,-791	,-774	,-758	,-741	,
-723	,-705	,-687	,-668	,-649	,-629	,-609	,-589	,
-568	,-547	,-525	,-504	,-482	,-459	,-437	,-414	,
-391	,-368	,-344	,-320	,-296	,-272	,-248	,-223	,
-199	,-174	,-149	,-124	,-99	,-74	,-49	,-24	,
};
LIB_API int Cos[256]={
1024	,1024	,1023	,1021	,1019	,1016	,1013	,1009	,
1004	,999	,993	,987	,980	,972	,964	,955	,
946		,936	,926	,915	,903	,891	,878	,865	,
851		,837	,822	,807	,792	,775	,759	,742	,
724		,706	,688	,669	,650	,630	,610	,590	,
569		,548	,526	,505	,483	,460	,438	,415	,
392		,369	,345	,321	,297	,273	,249	,224	,
200		,175	,150	,125	,100	,75		,50		,25		,
0			,-24	,-49	,-74	,-99	,-124	,-149	,-174	,
-199	,-223	,-248	,-272	,-296	,-320	,-344	,-368	,
-391	,-414	,-437	,-459	,-482	,-504	,-525	,-547	,
-568	,-589	,-609	,-629	,-649	,-668	,-687	,-705	,
-723	,-741	,-758	,-774	,-791	,-806	,-821	,-836	,
-850	,-864	,-877	,-890	,-902	,-914	,-925	,-935	,
-945	,-954	,-963	,-971	,-979	,-986	,-992	,-998	,
-1003	,-1008,-1012,-1015,-1018,-1020,-1022,-1023,
-1023	,-1023,-1022,-1020,-1018,-1015,-1012,-1008,
-1003	,-998	,-992	,-986	,-979	,-971	,-963	,-954	,
-945	,-935	,-925	,-914	,-902	,-890	,-877	,-864	,
-850	,-836	,-821	,-806	,-791	,-774	,-758	,-741	,
-723	,-705	,-687	,-668	,-649	,-629	,-609	,-589	,
-568	,-547	,-525	,-504	,-482	,-459	,-437	,-414	,
-391	,-368	,-344	,-320	,-296	,-272	,-248	,-223	,
-199	,-174	,-149	,-124	,-99	,-74	,-49	,-24	,
0			,25		,50		,75		,100	,125	,150	,175	,
200		,224	,249	,273	,297	,321	,345	,369	,
392		,415	,438	,460	,483	,505	,526	,548	,
569		,590	,610	,630	,650	,669	,688	,706	,
724		,742	,759	,775	,792	,807	,822	,837	,
851		,865	,878	,891	,903	,915	,926	,936	,
946		,955	,964	,972	,980	,987	,993	,999	,
1004	,1009	,1013	,1016	,1019	,1021	,1023	,1024	,
};
static MATRIX res;
static MATRIX tempmat;
static s32		sinTemp;
static s32		cosTemp;
/*==============================================================================================================*/
/*==============================================================================================================*/
LIB_API void 
math_RotateX(MATRIX* _this, s32 a_X )
{
	sinTemp = Sin[a_X];
	cosTemp = Cos[a_X];
	math_Identity(_this);
	_this->l[5] = cosTemp;
	_this->l[6] = sinTemp;
	_this->l[9] = -sinTemp;
	_this->l[10] = cosTemp;
}
/*==============================================================================================================*/
LIB_API void 
math_RotateY(MATRIX* _this, s32 a_Y )
{
	sinTemp = Sin[a_Y];
	cosTemp = Cos[a_Y];
	math_Identity(_this);
	_this->l[0] = cosTemp;
	_this->l[2] = -sinTemp;
	_this->l[8] = sinTemp;
	_this->l[10] = cosTemp;
}
/*==============================================================================================================*/
LIB_API void 
math_RotateZ(MATRIX* _this, s32 a_Z )
{
	sinTemp = Sin[a_Z];
	cosTemp = Cos[a_Z];
	math_Identity(_this);
	_this->l[0] = cosTemp;
	_this->l[1] = sinTemp;
	_this->l[4] = -sinTemp;
	_this->l[5] = cosTemp;
}
/*==============================================================================================================*/
LIB_API void 
math_Concat(MATRIX* _this, MATRIX* aM2)
{
	res.l[0]=		FPMUL(_this->l[0],	aM2->l[0]) + FPMUL(_this->l[1],		aM2->l[4]) + FPMUL(_this->l[2],		aM2->l[8]);
	res.l[1]=		FPMUL(_this->l[0],	aM2->l[1]) + FPMUL(_this->l[1],		aM2->l[5]) + FPMUL(_this->l[2],		aM2->l[9]);
	res.l[2]=		FPMUL(_this->l[0],	aM2->l[2]) + FPMUL(_this->l[1],		aM2->l[6]) + FPMUL(_this->l[2],		aM2->l[10]);
	res.l[3]=		FPMUL(_this->l[0],	aM2->l[3]) + FPMUL(_this->l[1],		aM2->l[7]) + FPMUL(_this->l[2],		aM2->l[11]);
	res.l[4]=		FPMUL(_this->l[4],	aM2->l[0]) + FPMUL(_this->l[5],		aM2->l[4]) + FPMUL(_this->l[6],		aM2->l[8]);
	res.l[5]=		FPMUL(_this->l[4],	aM2->l[1]) + FPMUL(_this->l[5],		aM2->l[5]) + FPMUL(_this->l[6],		aM2->l[9]);
	res.l[6]=		FPMUL(_this->l[4],	aM2->l[2]) + FPMUL(_this->l[5],		aM2->l[6]) + FPMUL(_this->l[6],		aM2->l[10]);
	res.l[7]=		FPMUL(_this->l[4],	aM2->l[3]) + FPMUL(_this->l[5],		aM2->l[7]) + FPMUL(_this->l[6],		aM2->l[11]);
	res.l[8]=		FPMUL(_this->l[8],	aM2->l[0]) + FPMUL(_this->l[9],		aM2->l[4]) + FPMUL(_this->l[10],	aM2->l[8]);
	res.l[9]=		FPMUL(_this->l[8],	aM2->l[1]) + FPMUL(_this->l[9],		aM2->l[5]) + FPMUL(_this->l[10],	aM2->l[9]);
	res.l[10]=	FPMUL(_this->l[8],	aM2->l[2]) + FPMUL(_this->l[9],		aM2->l[6]) + FPMUL(_this->l[10],	aM2->l[10]);
	res.l[11]=	FPMUL(_this->l[8],	aM2->l[3]) + FPMUL(_this->l[9],		aM2->l[7]) + FPMUL(_this->l[10],	aM2->l[11]);
	res.l[12]=	FPMUL(_this->l[12], aM2->l[0]) + FPMUL(_this->l[13],	aM2->l[4]) + FPMUL(_this->l[14],	aM2->l[8]);
	res.l[13]=	FPMUL(_this->l[12], aM2->l[1]) + FPMUL(_this->l[13],	aM2->l[5]) + FPMUL(_this->l[14],	aM2->l[9]);
	res.l[14]=	FPMUL(_this->l[12], aM2->l[2]) + FPMUL(_this->l[13],	aM2->l[6]) + FPMUL(_this->l[14],	aM2->l[10]);
	res.l[15]=	FPMUL(_this->l[12], aM2->l[3]) + FPMUL(_this->l[13],	aM2->l[7]) + FPMUL(_this->l[14],	aM2->l[11]);

	memcpy(_this, &res, sizeof(s32)*16);
}
/*==============================================================================================================*/
LIB_API void 
math_Rotate(MATRIX* _this, s32 a_RX, s32 a_RY, s32 a_RZ )
{	
	math_Identity(&tempmat);
	math_RotateX(&tempmat, a_RX );
	math_RotateY(_this, a_RY );
	math_Concat(_this, &tempmat );
	math_RotateZ(&tempmat, a_RZ );
	math_Concat(_this, &tempmat );
}
/*==============================================================================================================*/
/*==============================================================================================================*/
